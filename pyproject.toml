[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "vallenae"
version = "0.10.1"
description = "Extract and analyze Acoustic Emission measurement data"
authors = [{ name = "Lukas Berbuer", email = "software@vallen.de" }]
readme = "README.md"
license = { text = "MIT License" }
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
]
keywords = [
    "vallen",
    "acoustic emission",
    "amsy",
    "waveline",
    "data acquisition",
    "analysis",
    "timepicker",
    "sqlite",
    "pridb",
    "tradb",
    "trfdb",
]
dependencies = [
    "numpy",
    "pandas>=0.24",
    "soundfile",
    "tqdm",
    "typing_extensions",
]

[project.optional-dependencies]
docs = [
    "sphinx>=5",
    "sphinx-autodoc-typehints",
    "sphinx-gallery",
    "furo",
    "pillow",  # required by sphinx-gallery
    "myst-parser",  # include markdown files
    "matplotlib",  # used in examples
    "numba",  # used in location example
    "scipy",  # used in location and multiprocessing example
]
tests = [
    "coverage[toml]>=5",  # pyproject.toml support
    "pytest>=6",  # pyproject.toml support
    "pytest-benchmark",
]
tools = [
    "mypy>=0.9",  # pyproject.toml support
    "ruff>=0.5",
    "tox>=3.4",  # pyproject.toml support
]
dev = [
    "vallenae[docs,tests,tools]", # recursive dependency since pip 21.2
]

[project.entry-points.pyinstaller40]
hook-dirs = "vallenae._pyinstaller:get_hook_dirs"
tests     = "vallenae._pyinstaller:get_tests"

[project.urls]
Changelog = "https://github.com/vallen-systems/pyVallenAE/blob/master/CHANGELOG.md"
Source = "https://github.com/vallen-systems/pyVallenAE"
Issues = "https://github.com/vallen-systems/pyVallenAE/issues"

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", "W", # pycodestyle
    "I", # isort
    "N", # pep8 naming
    "B", # flake8 bugbear
    "A", # flake8 builtins
    "C4", # flake8 comprehensions
    "G", # flake8 logging format
    "PIE", # flake8 pie
    "RET", # flake8 return
    "SIM", # flake8 simplify
    "PT", # flake8 pytest style
    "PL", # pylint
    "PERF", # perflint
    "RUF", # ruff specific rules
]
ignore = [
    "PLR0911", # too many return statements
    "PLR0913", # too many arguments in function call
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "E501", # line too long
    "PLR0915", # too many statements
    "PT011", # use a more specific exception in pytest.raises
]
"examples/*" = [
    "E501", # line too long
]

[tool.coverage.run]
branch = true
parallel = true
source = ["vallenae"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"  # test summary for (a)ll except passed
testpaths = ["tests"]
log_cli = true
log_cli_level = "WARNING"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    ruff
    mypy
    py{37, 38, 39, 310, 311, 312}
    py{37, 38, 39, 310, 311, 312}-numba
    pyinstaller
    coverage-report
    docs

[testenv:ruff]
skip_install = true
deps = ruff
commands = ruff check .

[testenv:mypy]
skip_install = true
deps = mypy
commands = mypy src/

[testenv]
setenv =
    NUMBA_DISABLE_JIT = 1
deps =
    numba: numba
extras = tests
commands = 
    coverage run -m pytest --benchmark-disable

[testenv:coverage-report]
skip_install = true
deps = coverage[toml]>=5
commands =
    - coverage combine
    coverage report
    coverage xml

[testenv:pyinstaller]
deps = pyinstaller>=4
commands = python -m PyInstaller.utils.run_tests --include_only vallenae.

[testenv:docs]
extras = docs
changedir = docs
commands =
    sphinx-build -b dummy . _build
    sphinx-build -b linkcheck . _build
"""
